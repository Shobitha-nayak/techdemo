# # # name: CI/CD for Frontend and Backend with Helm

# # # on:
# # #   push:
# # #     branches:
# # #       - main

# # # jobs:
# # #   build-and-deploy:
# # #     runs-on: ubuntu-latest

# # #     steps:
# # #       # Checkout the code
# # #       - name: Checkout code
# # #         uses: actions/checkout@v2

# # #       # Build and Push Frontend Docker Image
# # #       - name: Set up Node.js
# # #         uses: actions/setup-node@v2
# # #         with:
# # #           node-version: '18'

# # #       - name: Install frontend dependencies
# # #         run: npm install
# # #         working-directory: ./frontend

# # #       - name: Build frontend
# # #         run: npm run build
# # #         working-directory: ./frontend

# # #       - name: Log in to Docker Hub
# # #         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

# # #       - name: Build Frontend Docker image
# # #         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1 .
# # #         working-directory: ./frontend

# # #       - name: Push Frontend Docker image
# # #         run: docker push ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1

# # #       # Build and Push Backend Docker Image
# # #       - name: Set up Python
# # #         uses: actions/setup-python@v2
# # #         with:
# # #           python-version: '3.9'

# # #       - name: Install backend dependencies
# # #         run: pip install -r requirements.txt
# # #         working-directory: ./backend

# # #       - name: Build Backend Docker image
# # #         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1 .
# # #         working-directory: ./backend

# # #       - name: Push Backend Docker image
# # #         run: docker push ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1























# # name: CI/CD for Frontend and Backend with Helm

# # on:
# #   push:
# #     branches:
# #       - main

# # jobs:
# #   build-and-deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #       # Checkout the code
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       # Build and Push Frontend Docker Image
# #       - name: Set up Node.js
# #         uses: actions/setup-node@v2
# #         with:
# #           node-version: '18'

# #       - name: Install frontend dependencies
# #         run: npm install
# #         working-directory: ./frontend

# #       - name: Build frontend
# #         run: npm run build
# #         working-directory: ./frontend

# #       - name: Log in to Docker Hub
# #         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

# #       - name: Build Frontend Docker image
# #         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1 .
# #         working-directory: ./frontend

# #       - name: Push Frontend Docker image
# #         run: docker push ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1

# #       # Build and Push Backend Docker Image
# #       - name: Set up Python
# #         uses: actions/setup-python@v2
# #         with:
# #           python-version: '3.9'

# #       - name: Install backend dependencies
# #         run: pip install -r requirements.txt
# #         working-directory: ./backend

# #       - name: Build Backend Docker image
# #         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1 .
# #         working-directory: ./backend

# #       - name: Push Backend Docker image
# #         run: docker push ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1

# #       # Set up Kubernetes
# #       - name: Set up Kubeconfig
# #         uses: azure/k8s-set-context@v3
# #         with:
# #           method: kubeconfig
# #           kubeconfig: ${{ secrets.KUBECONFIG }}

# #       # Deploy using Helm
# #       - name: Deploy with Helm
# #         run: helm upgrade --install tech-demo /home/sigmoid/TECH-DEMO/helm-chart --kube-context minikube --debug





# name: Build, Push, and Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Backend Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1 -f ./backend/Dockerfile ./backend
#           docker push ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1

#       - name: Build and Push Frontend Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1 -f ./frontend/Dockerfile ./frontend
#           docker push ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1

#       - name: Install Minikube
#         run: |
#           curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           sudo install minikube-linux-amd64 /usr/local/bin/minikube

#       - name: Start Minikube
#         run: |
#           minikube start
#           minikube status

#       - name: Set up kubeconfig
#         run: |
#           mkdir -p ~/.kube
#           minikube update-context
#           chmod 600 ~/.kube/config
#           kubectl config view

#       # - name: Install Helm
#       #   run: |
#       #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

#       - name: Change directory to helm-chart
#         run: cd TECH-DEMO/helm-chart

#       - name: Install Helm Chart
#         run: |
#           helm upgrade --install tech-demo . --set backend.image=shobithanayak24/stock-backend:1.1 --set frontend.image=shobithanayak24/stock-frontend:1.1 --kube-context minikube --debug

#       # - name: Deploy with Helm
#       #   run: |
#       #     helm upgrade --install tech-demo ./TECH-DEMO/helm-chart --set backend.image=shobithanayak24/stock-backend:1.1 --set frontend.image=shobithanayak24/stock-frontend:1.1 --kube-context minikube --debug






name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List repository contents
        run: ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1 -f ./backend/Dockerfile ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/stock-backend:1.1
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1 -f ./frontend/Dockerfile ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/stock-frontend:1.1
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
      - name: Start Minikube
        run: |
          minikube start
          minikube status
      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          minikube update-context
          chmod 600 ~/.kube/config
          kubectl config view

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          helm-version: v3.9.0

      - name: List files after checkout
        run: ls -R

      - name: Install Helm Chart
        run: |
          helm upgrade --install tech-demo ./TECH-DEMO/helm-chart --set backend.image=shobithanayak24/stock-backend:1.1 --set frontend.image=shobithanayak24/stock-frontend:1.1 --kube-context minikube --debug



      
  
